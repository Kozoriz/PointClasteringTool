@startuml

' classes description

package "Model" {
	interface ClusteringAlgo {
	  +{abstract} utils::Vector<Cluster> RunTask(PointCloud::Ptr pc) = 0;
	  +{abstract} utils::String GetName() const = 0;
	}

	class AlgorithmMST {
	  +AlgorithmMST(const ApplicationSettings& settings);
	  +utils::Vector<Cluster> RunTask(PointCloud::Ptr pc) override;
	  +utils::String GetName() const override;

	  -const ApplicationSettings& m_settings;
	}

	class AlgorithmCLOPE {
	   +AlgorithmCLOPE(const ApplicationSettings& settings);
	   +utils::Vector<Cluster> RunTask(PointCloud::Ptr pc) override;
	   +utils::String GetName() const override;

	   -const ApplicationSettings& m_settings;
	}

	class PointCloudManager {
	  +typedef utils::Vector<SharedPtr<PointCloud> > PointClouds;
	  +typedef utils::Vector<Cluster> Clusters;

	  +PointCloudManager(ApplicationSettings& settings, StatisticsManager& stats_manager);
	  +PointCloud::Ptr LoadNewCloud(utils::String& sPath);
	  +void RunClasteringProcess(PointCloud::Ptr cloud);
	  +void SaveClusters();

	  +const PointClouds& GetPointClouds() const;
	  +const Clusters& GetClusters() const;

	  +PointCloud::ConstPtr GetMatrix(utils::String& filename) const;
	  +const utils::Vector<utils::String> GetCloudNames() const;

	  -const ApplicationSettings& m_settings;
	  -StatisticsManager& m_stats_manager;
	  -utils::Vector<SharedPtr<ClusteringAlgo> > m_clustering_algos;
	  -PointClouds m_point_clouds;
	  -Clusters m_clusters;
	}

	class PointCloud {
	  +typedef SharedPtr<PointCloud> Ptr;
	  +typedef SharedPtr<const PointCloud> ConstPtr;

	  +PointCloud(const utils::String& pc_name);

	  +const utils::String& GetPCName() const;
	  +bool IsClustered() const;
	  +void SetClustered(bool is_clustered = true);

	  +void LoadFrom(const utils::String &path);
	  +void LoadFrom(utils::file_system::File& file);
	  +void SaveTo(const utils::String &path) const;

	  +void ShiftTo(int x, int y, int z);

	  -utils::String m_cloud_name;
	  -bool m_is_clustered;
	}

	class StatisticsManager	{
	  +StatisticsManager(ApplicationSettings& settings);
	  +void StartMeasurement();
	  +void StopMeasurement();
	  +void SaveMeasurementData(const utils::String& path);

	  -utils::Vector<utils::UniquePtr<MeasurementTool> > m_measurement_tools;
	  -utils::Vector<utils::threads::Thread> m_measurement_threads;
	  -utils::String m_last_start;
	  -utils::synchronization::Barrier m_tools_stop_barrier;

	  -ApplicationSettings& m_settings;
	}


	class ValueStamp {
	  +utils::String ToString() const;
	  +double m_value;
	  +std::chrono::system_clock::time_point m_time;
	}

	abstract class MeasurementTool {
	  +MeasurementTool(utils::synchronization::Barrier& stop_barrier, ApplicationSettings& settings);
	  +{abstract}  inline utils::String GetName() const = 0;
	  +const utils::Vector<ValueStamp> &GetValues() const;
	  +void Clear();
	  +void Join() override;
	
	  #utils::synchronization::AtomicBool is_joined;
	  #utils::Vector<ValueStamp> m_values;
	  #utils::synchronization::Barrier& m_stop_barrier;

	  #ApplicationSettings& m_settings;
	}

	class CPUMonitor {
	  +CPUMonitor(utils::synchronization::Barrier& stop_barrier, ApplicationSettings &settings);
	  +void Run() override;
	  +inline utils::String GetName() const override;
	}

	class RAMMonitor {
	  +RAMMonitor(utils::synchronization::Barrier &stop_barrier, ApplicationSettings& settings);
	  +void Run() override;
	  +inline utils::String GetName() const override;
	}


	class ApplicationSettings {
	  +ApplicationSettings(const utils::String& ini_path);
	  +const utils::String &get_working_dir() const;
	  +UInt get_measurement_delay() const;
	  +float get_clope_sensivity() const;
	  +int get_mst_neighbors() const;
	  +int get_mst_clusters_count() const;

	  -utils::String m_working_dir;
	  -UInt m_measurement_delay;
	  -float m_clope_sensivity;
	  -int m_mst_neighbors;
	  -int m_mst_clusters_count;
	}
}

package "Controller" {
	class Controller {
	  +Controller(PointCloudManager& pc_manager, std::shared_ptr<IRender>&);
	  +void fillCloudList() const;
	  +void newFileOpened(utils::String& filename);
	  +void cloudChoosen(utils::String& filename);

	  -PointCloudManager& m_pc_manager;
	  -std::shared_ptr<IRender>& m_render;
	}
}

package "UI" {
	interface IRender {
	  +{abstract} void start_app( ) = 0;
	  +{abstract} void addCloudToList(const utils::String& name) = 0;
	  +{abstract} void ShowCloud(PointCloud::ConstPtr cloud) = 0;
	}

	class UIWindow {
	    +explicit UIWindow(Controller&, QWidget *parent = nullptr);
	    
	    +void addCloudToList(const utils::String& name);
	    +void showCloud(PointCloud::ConstPtr pc);

	    -void openFileDialog();
	    -void cloudChoosen( QListWidgetItem* );

	    -Ui::UIWindow *ui;
	    -std::unique_ptr<pcl::visualization::PCLVisualizer> viewer;
	    -Controller& m_controller;
	}

	class RenderImpl {
	    +RenderImpl(Controller&);

	    +void start_app( ) override;
	    +void addCloudToList(const utils::String& name) override;
	    +void ShowCloud(PointCloud::ConstPtr cloud) override;

	    -UIWindow m_ui;
	}

}

package "Qt" {
	class QMainWindow{
	}
}

package "pcl" {
	package "visualization" {
		class PCLVisualizer {

		}
	}
}

' relations
ClusteringAlgo <|-u- AlgorithmMST
ClusteringAlgo <|-u- AlgorithmCLOPE

PointCloudManager .d.> ClusteringAlgo : <using>
PointCloudManager .r.> StatisticsManager : <using>
StatisticsManager .d.> MeasurementTool : <using>

MeasurementTool <|-d- CPUMonitor
MeasurementTool <|-d- RAMMonitor
MeasurementTool .d.> ValueStamp : <using>

PointCloudManager <.. Controller
IRender <.. Controller

ApplicationSettings <.. MeasurementTool
ApplicationSettings <.. StatisticsManager
ApplicationSettings <.. PointCloudManager
ApplicationSettings <.. AlgorithmCLOPE
ApplicationSettings <.. AlgorithmMST

QMainWindow <|-r- UIWindow
IRender <|-u- RenderImpl

RenderImpl ..> UIWindow
UIWindow .l.> PCLVisualizer

PointCloudManager ..> PointCloud

@enduml