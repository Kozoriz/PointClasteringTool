@startuml


package "Model" {	

	class StatisticsManager	{
	  +StatisticsManager(...);
	  +void StartMeasurement();
	  +void StopMeasurement();
	  +void SaveMeasurementData(...);

	  -utils::Vector<utils::UniquePtr<MeasurementTool> > m_measurement_tools;
	  -utils::Vector<utils::threads::Thread> m_measurement_threads;
	  -utils::String m_last_start;
	  -utils::synchronization::Barrier m_tools_stop_barrier;

	  -ApplicationSettings& m_settings;
	}


	class ValueStamp {
	  +utils::String ToString() const;
	  +double m_value;
	  +std::chrono::system_clock::time_point m_time;
	}

	abstract class MeasurementTool {
	  +MeasurementTool(...);
	  +{abstract}  inline utils::String GetName() const = 0;
	  +const utils::Vector<ValueStamp> &GetValues() const;
	  +void Clear();
	  +void Join() override;
	
	  #utils::synchronization::AtomicBool is_joined;
	  #utils::Vector<ValueStamp> m_values;
	  #utils::synchronization::Barrier& m_stop_barrier;

	  #ApplicationSettings& m_settings;
	}

	class CPUMonitor {
	  +CPUMonitor(...);
	  +void Run() override;
	  +inline utils::String GetName() const override;
	}

	class RAMMonitor {
	  +RAMMonitor(...);
	  +void Run() override;
	  +inline utils::String GetName() const override;
	}

	interface PointCloudManager {
	}
}

PointCloudManager ..> StatisticsManager
StatisticsManager ..> MeasurementTool 

MeasurementTool <|-- CPUMonitor
MeasurementTool <|-- RAMMonitor
MeasurementTool .r.> ValueStamp


@enduml